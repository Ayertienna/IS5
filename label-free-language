 Note
------
This is not really a label-free language, as we attach labels to contexts, but the logic used here is IS5 label-free logic.


I. Statics
----------

1. Variable

  
       Gamma[n] == A
------------------------------- (Id)
 G |= (w, Gamma) |- hyp n : A


2. Arrow


     G |= (w, A::Gamma) |- M : B 
-------------------------------------- (-> I)
 G |= (w, Gamma) |- lam A, M : A -> B


 G |= (w, Gamma) |- M : A -> B   G |= (w, Gamma) |- N : A
----------------------------------------------------------- (-> E)
              G |= (w, Gamma) |- appl M N : B


3. Box


  forall w0, w0 \notin L -> G & (w, Gamma) |= (w0, nil) |- M^w0 : A
---------------------------------------------------------------------- ([] I)
                G |= (w, Gamma) |- box M : [] A


  G |= (w, Gamma) |- M : [] A
-------------------------------- ([] E1)
 G |= (w, Gamma) |- unbox M : A


 G & (w', Gamma') |= (w, Gamma) |- M : [] A   Permutation (G & (w, Gamma)) G'
------------------------------------------------------------------------------ ([] E2)
               G' |= (w', Gamma') |- unbox_fetch M : A


4. Diamond


   G |= (w, Gamma) |- M : A
---------------------------------- (<> I1)
 G |= (w, Gamma) |- here M : <> A


 G & (w', Gamma') |= (w, Gamma) |- M : A   Permutation (G & (w, Gamma)) G'
--------------------------------------------------------------------------- (<> I2)
            G' |= (w', Gamma') |- get_here w M : <> A


 G |= (w, Gamma) |- M : <> A     (w0, A::nil) :: G |= (w, Gamma) |- N ^ w0 : B
------------------------------------------------------------------------------- (<> E1)
             G |= (w, Gamma) |- letdia M in N : B


 G & (w', Gamma') |= (w, Gamma) |- M : <> A   forall w0, w0 \notin L -> (w0, (A::nil)) :: G & (w, Gamma) |= (w', Gamma') |- N ^ w0 : B   Permutation (G & (w, Gamma)) G'
------------------------------------------------------------------------------------------------------------------------------------------------------------------------- (<> E2)
                                                         G' |= (w', Gamma') |- letdia_get w M in N : B


II. Dynamics
------------

A. Values

value (lam A, M)

value (box M)

value M ==> value (here M)

value M ==> value (get_here M)


B. Reductions

appl (lam A, M) N, w  |--> [ N // 0 | w ] [ M | w ], w

unbox (box M), w |--> M ^ w, w

unbox_fetch w' (box M), w | --> M ^ w, w

letd (here M) in N, w |--> [ M // 0 | w ] [ N ^ w | w ], w

letd (get_here w' M) in N, w |--> [ M // 0 | w' ] [ N ^ w' | w ], w

letd_get w' (here M) in N, w |--> [ M // 0 | w' ] [ N ^ w' | w ], w

letd_get w' (get_here w'' M) in N, w |--> [ M // 0 | w'' ] [ N ^ w'' | w ], w

(M, w |--> M', w) ==> (appl M N, w |--> appl M' N, w)

(M, w |--> M', w) ==> (unbox M, w |--> unbox M', w)

(M, w |--> M', w) ==> (unbox_fetch w M, w' |--> unbox_fetch w  M', w')

(M, w |--> M', w) ==> (here M, w |--> here M', w)

(M, w |--> M', w) ==> (get_here w M, w' |--> get_here w M', w')

(M, w |--> M', w) ==> (letd M in N, w |--> letd M' in N, w)

(M, w |--> M', w) ==> (letd_get w M in N, w' |--> letd_get w M' in N, w')

